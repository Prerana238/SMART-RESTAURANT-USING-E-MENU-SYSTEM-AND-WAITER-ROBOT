#include <VirtualWire.h> 
struct package 
{ 
int id;  
int a; 
int b ;  
int c ; 
int d; 
float e; 
}; 
typedef struct package Package; 
Package data; 
int totalcount = 0; 
int pa=0; 
#include <MCUFRIEND_kbv.h> 
#include <TouchScreen.h> 
#define LCD_CS A3 
#define LCD_CD A2 
#define LCD_WR A1 
#define LCD_RD A0 
#define LCD_RESET A5 
MCUFRIEND_kbv tft; 
 
#define YP A3 // Must be an analog pin, use "An" notation! 
#define XM A2 // Must be an analog pin, use "An" notation! 
#define YM 9 // Can be a digital pin 
#define XP 8 // Can be a digital pin 
#define TS_MINX 150 
#define TS_MAXX 920 
#define TS_MINY 120 
#define TS_MAXY 950 
#define BUTTON_WIDTH 80 
#define BUTTON_HEIGHT 50 
#define BUTTON_MARGIN 0 
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300); 
#define BLACK 0x0000 
#define WHITE 0xFFFF 
#define BLUE 0x001F 
#define GRAY 0x8510 
#define RED 0xF800 
#define GREEN 0x07E0 
#define LIME 0x07E0 // same as GREEN 
#define CYAN 0x07FF 
#define MAGENTA 0xF81F 
#define YELLOW 0xFFE0 
#define ORANGE 0xFD20 
#define PURPLE 0x8010 
 
 
#define PINK 0xF81F // same as MAGENTA 
#define TURQUOISE 0x571A 
#define BROWN 0x8200 
#define MAROON 0x8000 
#define OLIVE 0x8500 
#define NAVY 0x000F 
#define TEAL 0x0510 
#define SILVER 0xC618 
#define GOLD 0xFEA0 
#define INDIGO 0x5810 
#define VIOLET 0x8810 
int buttonY; 
int count1 = 0, count2 = 0, count3 = 0, count5 = 0; 
void drawButton(int x, int y, int width, int height, uint16_t color, const char* label)  
{ 
tft.fillRect(x, y, width, height, color); 
tft.drawRect(x, y, width, height, BLACK); 
tft.setTextColor(WHITE); 
tft.setTextSize(2); 
int textX = x + (width - (strlen(label) * 6 * 2)) / 2; 
int textY = y + (height - 16) / 2; 
tft.setCursor(textX, textY); 
tft.print(label); 
} 
 
void setup() 
{ 
Serial.begin(9600); 
uint32_t when = millis(); 
if (!Serial) delay(5000); 
Serial.println("Initializing TFT display..."); 
tft.reset(); 
uint16_t ID = tft.readID(); 
if (ID == 0xD3D3) ID = 0x9581; 
tft.begin(ID); 
tft.fillScreen(BLACK); 
Serial.println("TFT display initialized."); 
tft.setTextSize(5); 
tft.setTextColor(INDIGO); 
tft.setCursor(10,80); 
tft.print("Welcome "); 
tft.setCursor(0,150); 
tft.print(" to "); 
tft.setCursor(10,200); 
tft.print(" MFC");  
delay(2000); 
tft.fillScreen(BLACK); 
int screenWidth = tft.width(); 
int screenHeight = tft.height(); 

buttonY = (screenHeight - BUTTON_HEIGHT) / 2; 
drawButton(80, 30 , BUTTON_WIDTH+57, BUTTON_HEIGHT, PINK, " ITEMS "); 
drawButton(BUTTON_MARGIN, buttonY - BUTTON_HEIGHT - BUTTON_MARGIN, 
BUTTON_WIDTH+10, BUTTON_HEIGHT, VIOLET, "Dosa 80"); 
drawButton(screenWidth - BUTTON_MARGIN - BUTTON_WIDTH-10, buttonY - 
BUTTON_HEIGHT - BUTTON_MARGIN, BUTTON_WIDTH+10, BUTTON_HEIGHT, 
TURQUOISE, "Idly 60"); 
drawButton(BUTTON_MARGIN, buttonY + BUTTON_HEIGHT + BUTTON_MARGIN, 
BUTTON_WIDTH+10, BUTTON_HEIGHT, INDIGO, "Poha 55"); 
drawButton(screenWidth - BUTTON_MARGIN - BUTTON_WIDTH-10, buttonY + 
BUTTON_HEIGHT + BUTTON_MARGIN, BUTTON_WIDTH+10, BUTTON_HEIGHT, 
MAROON, "Puri 70"); 
drawButton(screenWidth / 2 - BUTTON_WIDTH / 2, buttonY + 3 * BUTTON_HEIGHT + 3 
* BUTTON_MARGIN, BUTTON_WIDTH, BUTTON_HEIGHT, OLIVE, "Submit"); 
vw_set_ptt_inverted(true);  
vw_set_tx_pin(12);  
vw_setup(5000); 
} 
void loop() 
{ 
if(totalcount!=pa) 
{ 
Serial.println(totalcount); 
pa=totalcount; 
int clearWidth = 50; // Adjust according to your needs 
int clearHeight = 20; // Adjust according to your needs 
 
int clearX = 30; // X coordinate of the area to clear 
int clearY = 50; // Y coordinate of the area to clear 
tft.fillRect(clearX, clearY, clearWidth, clearHeight, TFT_BLACK); // Change TFT_BLACK to 
your background color 
tft.setCursor(30, 50); 
tft.print(totalcount); // Print the new amount 
} 
char buff[32]; 
TSPoint p = ts.getPoint(); 
pinMode(YP, OUTPUT); 
pinMode(XM, OUTPUT); 
if (p.z > 100) { 
int16_t x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0); 
int16_t y = map(p.y, TS_MINY, TS_MAXY, tft.height(), 0); 
Serial.print("Touch detected at X: "); 
Serial.print(x); 
Serial.print(", Y: "); 
Serial.println(y); 
int screenWidth = tft.width(); 
int screenHeight = tft.height(); 
if (x > BUTTON_MARGIN && x < BUTTON_MARGIN + BUTTON_WIDTH && y > 
buttonY - BUTTON_HEIGHT - BUTTON_MARGIN && y < buttonY - BUTTON_MARGIN) 
{ 
count1 = count1+70; 
// totalcount = totalcount+count1; 
 
Serial.println("Dish 1 selected."); 
delay(100); 
} 
if (x > screenWidth - BUTTON_MARGIN - BUTTON_WIDTH && x < screenWidth - 
BUTTON_MARGIN && y > buttonY - BUTTON_HEIGHT - BUTTON_MARGIN && y < 
buttonY - BUTTON_MARGIN) { 
count2 = count2+55; 
// totalcount = totalcount+count2; 
Serial.println("Dish 2 selected."); 
delay(100); 
} 
if (x > BUTTON_MARGIN && x < BUTTON_MARGIN + BUTTON_WIDTH && y > 
buttonY + BUTTON_HEIGHT + BUTTON_MARGIN && y < buttonY + 2 * 
BUTTON_HEIGHT + BUTTON_MARGIN) { 
count3= count3+60; 
// totalcount = totalcount+count3; 
Serial.println("Dish 3 selected."); 
delay(100); 
} 
if (x > screenWidth - BUTTON_MARGIN - BUTTON_WIDTH && x < screenWidth - 
BUTTON_MARGIN && y > buttonY + BUTTON_HEIGHT + BUTTON_MARGIN && y < 
buttonY + 2 * BUTTON_HEIGHT + BUTTON_MARGIN) { 
count5= count5+80; 
// totalcount = totalcount+count5; 
Serial.println("Dish 5 selected."); 
delay(100); 
 
} 
// if (x > screenWidth / 2 - BUTTON_WIDTH / 2 && x < screenWidth / 2 + BUTTON_WIDTH 
/ 2 && y > buttonY + 3 * BUTTON_HEIGHT + 3 * BUTTON_MARGIN && y < buttonY + 
5 * BUTTON_HEIGHT + 3 * BUTTON_MARGIN) { 
if((x>120 && x<150) && ((y>30) && (y<50))) 
{ 
int totalAmount = count1 + count2 + count3 + count5; 
Serial.println(totalAmount); 
tft.fillRect(0, 0, tft.width(), tft.height(), BLACK); 
tft.setTextColor(MAROON); 
tft.setTextSize(5); 
tft.setCursor(10,60); 
tft.print("TOTAL :"); 
tft.setCursor(70,110); 
tft.print(String(totalcount)+" Rs"); 
tft.setTextColor(INDIGO); 
tft.setCursor(10,180); 
tft.print("Thank You"); 
Serial.print("Total Amount: "); 
Serial.println(totalAmount); 
delay(500); 
data.id = 6; 
data.a = count1; 
data.b = count2; 
data.c = count3; 
data.d = count5; 
vw_send((uint8_t *)&data, sizeof(data)); 
vw_wait_tx(); // Wait until the whole message is  
} 
if (x > screenWidth / 2 - BUTTON_WIDTH / 2 && x < screenWidth / 2 + BUTTON_WIDTH 
/ 2 && y > buttonY + 5 * BUTTON_HEIGHT + 5 * BUTTON_MARGIN && y < buttonY + 
5 * BUTTON_HEIGHT + 5 * BUTTON_MARGIN) { 
// count1 = count2 = count3 = count5 = 0; 
Serial.println("Counts reset."); 
delay(500); 
} 
} 
totalcount = count1 + count2 + count3 + count5; 
// data.temp = Temp; 
//vw_send((uint8_t *)&data, sizeof(data)); 
// vw_wait_tx(); // Wait until the whole message is gone 
data = {  
}; 
} 
